{"ast":null,"code":"var _jsxFileName = \"/home/root-pc/Desktop/INTERN/projects/my-app/src/components/EditableTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Table, Button, Input, Modal, InputNumber, Popconfirm, Form, Typography } from \"antd\";\nimport \"./TableCom.css\";\nimport Item from \"antd/lib/list/Item\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet originData = []; // for (let i = 0; i < 10; i++) {\n//   originData.push({\n//     key: i.toString(),\n//     name: `Edrward ${i}`,\n//     age: 32,\n//     address: `London Park no. ${i}`,\n//   });\n// }\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === \"number\" ? /*#__PURE__*/_jsxDEV(InputNumber, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 46\n  }, this) : /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 64\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      children: inputNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_c = EditableCell;\nconst defaultUserData = {\n  id: \"\",\n  email: \"\",\n  name: \"\",\n  address: {\n    street: \"\"\n  }\n};\n\nconst EditableTable = () => {\n  _s();\n\n  const [form] = Form.useForm();\n  const [editingKey, setEditingKey] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [userDetails, setUserDetails] = useState(defaultUserData);\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const [data, setData] = useState(originData);\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(json => {\n      // res.map((x11: any, index: number) =>\n      //   originData.push({\n      //     key: x11.id,\n      //     name: x11.name,\n      //     age: x11.id,\n      //     address: x11.email,\n      //   })\n      // );\n      setData(json); // localStorage.setItem(\"data\", JSON.stringify(originData));\n    });\n  }, []);\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue({\n      name: \"\",\n      age: \"\",\n      address: \"\",\n      ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const delete1 = record => {\n    form.setFieldsValue({});\n    setEditingKey(record.key);\n  }; // const view = (record: Partial<Item> & { key: React.Key }) => {\n  //   form.setFieldsValue({});\n  //   setEditingKey(record.key);\n  // };\n\n\n  const showModal = record => {\n    console.log(\"Record type\", typeof record);\n    setIsModalVisible(true);\n    setUserDetails({\n      name: record.name,\n      id: record.id,\n      email: record.email,\n      address: \"Address\"\n    });\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        setData(newData);\n        setEditingKey(\"\");\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey(\"\");\n      }\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n\n  const columns = [{\n    title: \"NAME\",\n    dataIndex: \"name\",\n    width: \"25%\",\n    editable: true\n  }, {\n    title: \"AGE\",\n    dataIndex: \"id\",\n    width: \"15%\",\n    editable: true\n  }, {\n    title: \"ADDRESS\",\n    dataIndex: \"email\",\n    width: \"40%\",\n    editable: true\n  }, {\n    title: \"OPERATIONS\",\n    dataIndex: \"operation\",\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"javascript:;\",\n          onClick: () => save(record.key),\n          style: {\n            marginRight: 8\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: cancel,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          style: {\n            marginRight: 8\n          },\n          onClick: () => {\n            showModal(record);\n          },\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          title: \"Basic Modal\",\n          visible: isModalVisible,\n          onOk: handleOk,\n          onCancel: handleCancel,\n          children: userDetails !== null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"User id: \", userDetails.id, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Name: \", userDetails.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Email: \", userDetails.email]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Address: \", userDetails.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography.Link, {\n          disabled: editingKey !== \"\",\n          onClick: () => edit(record),\n          style: {\n            marginRight: 8\n          },\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography.Link, {\n          // disabled={editingKey !== \"\"}\n          onClick: () => delete1(record),\n          children: /*#__PURE__*/_jsxDEV(Popconfirm, {\n            title: \"Sure to delete?\",\n            onConfirm: cancel,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true);\n    }\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  }); // const handleAdd = () => {\n  //   const newData: Item = {\n  //     key: String(count),\n  //     name: `Edward King ${count}`,\n  //     age: '32',\n  //     address: `London, Park Lane no. ${count}`,\n  //   };\n  //   this.setState({\n  //     dataSource: [...dataSource, newData],\n  //     count: count + 1,\n  //   });\n  // };\n  // let data1: any = localStorage.getItem(\"data\");\n\n  console.log(\"user details\", userDetails);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      component: false,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        components: {\n          body: {\n            cell: EditableCell\n          }\n        },\n        bordered: true,\n        dataSource: data,\n        columns: mergedColumns,\n        rowClassName: \"editable-row\",\n        pagination: {\n          onChange: cancel\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(EditableTable, \"83NQ8w5XJTYCcDBZ3/NjV3kHl/0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c2 = EditableTable;\nexport default EditableTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableCell\");\n$RefreshReg$(_c2, \"EditableTable\");","map":{"version":3,"sources":["/home/root-pc/Desktop/INTERN/projects/my-app/src/components/EditableTable.tsx"],"names":["React","useState","useEffect","Table","Button","Input","Modal","InputNumber","Popconfirm","Form","Typography","Item","originData","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","margin","required","message","defaultUserData","id","email","name","address","street","EditableTable","form","useForm","editingKey","setEditingKey","count","setCount","isModalVisible","setIsModalVisible","userDetails","setUserDetails","handleOk","data","setData","handleCancel","fetch","then","response","json","isEditing","key","edit","setFieldsValue","age","delete1","showModal","console","log","cancel","save","row","validateFields","newData","findIndex","item","splice","push","errInfo","columns","width","editable","render","_","marginRight","mergedColumns","map","col","onCell","body","cell","onChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Table,\n  Button,\n  Input,\n  Modal,\n  InputNumber,\n  Popconfirm,\n  Form,\n  Typography,\n} from \"antd\";\nimport \"./TableCom.css\";\nimport Item from \"antd/lib/list/Item\";\n\ninterface Item {\n  key: string;\n  name: string;\n  age: number;\n  address: { street: string };\n\n  id: number;\n  email: string;\n}\n\ninterface UserData {\n  record: {\n    name: string;\n    address: string;\n    id: number;\n    email: string;\n  };\n}\n\nlet originData: Item[] = [];\n// for (let i = 0; i < 10; i++) {\n//   originData.push({\n//     key: i.toString(),\n//     name: `Edrward ${i}`,\n//     age: 32,\n//     address: `London Park no. ${i}`,\n//   });\n// }\n\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n  editing: boolean;\n  dataIndex: string;\n  title: any;\n  inputType: \"number\" | \"text\";\n  record: Item;\n  index: number;\n  children: React.ReactNode;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === \"number\" ? <InputNumber /> : <Input />;\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\nconst defaultUserData = {\n  id: \"\",\n  email: \"\",\n  name: \"\",\n  address: { street: \"\" },\n};\n\nconst EditableTable = () => {\n  const [form] = Form.useForm();\n\n  const [editingKey, setEditingKey] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [userDetails, setUserDetails] = useState<UserData | any>(\n    defaultUserData\n  );\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n  const [data, setData] = useState(originData);\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((json) => {\n        // res.map((x11: any, index: number) =>\n        //   originData.push({\n        //     key: x11.id,\n        //     name: x11.name,\n        //     age: x11.id,\n        //     address: x11.email,\n        //   })\n        // );\n        setData(json);\n        // localStorage.setItem(\"data\", JSON.stringify(originData));\n      });\n  }, []);\n\n  const isEditing = (record: Item) => record.key === editingKey;\n\n  const edit = (record: Partial<Item> & { key: React.Key }) => {\n    form.setFieldsValue({ name: \"\", age: \"\", address: \"\", ...record });\n    setEditingKey(record.key);\n  };\n\n  const delete1 = (record: Partial<Item> & { key: React.Key }) => {\n    form.setFieldsValue({});\n    setEditingKey(record.key);\n  };\n\n  // const view = (record: Partial<Item> & { key: React.Key }) => {\n  //   form.setFieldsValue({});\n  //   setEditingKey(record.key);\n  // };\n\n  const showModal = (record: Partial<Item> & { key: React.Key }) => {\n    console.log(\"Record type\", typeof record);\n    setIsModalVisible(true);\n    setUserDetails({\n      name: record.name,\n      id: record.id,\n      email: record.email,\n      address: \"Address\",\n    });\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async (key: React.Key) => {\n    try {\n      const row = (await form.validateFields()) as Item;\n      const newData = [...data];\n      const index = newData.findIndex((item) => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        setData(newData);\n        setEditingKey(\"\");\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey(\"\");\n      }\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n\n  const columns = [\n    {\n      title: \"NAME\",\n      dataIndex: \"name\",\n      width: \"25%\",\n      editable: true,\n    },\n    {\n      title: \"AGE\",\n      dataIndex: \"id\",\n      width: \"15%\",\n      editable: true,\n    },\n    {\n      title: \"ADDRESS\",\n      dataIndex: \"email\",\n      width: \"40%\",\n      editable: true,\n    },\n    {\n      title: \"OPERATIONS\",\n      dataIndex: \"operation\",\n      render: (_: any, record: Item) => {\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <a\n              href=\"javascript:;\"\n              onClick={() => save(record.key)}\n              style={{ marginRight: 8 }}\n            >\n              Save\n            </a>\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n              <a>Cancel</a>\n            </Popconfirm>\n          </span>\n        ) : (\n          <>\n            {/* <Typography.Link disabled={editingKey !== ''} onClick={() => view(record)} style={{ marginRight: 8 }}>\n             View\n           </Typography.Link> */}\n\n            <Button\n              type=\"primary\"\n              style={{ marginRight: 8 }}\n              onClick={() => {\n                showModal(record);\n              }}\n            >\n              View\n            </Button>\n            <Modal\n              title=\"Basic Modal\"\n              visible={isModalVisible}\n              onOk={handleOk}\n              onCancel={handleCancel}\n            >\n              {userDetails !== null ? (\n                <>\n                  <p>User id: {userDetails.id} </p>\n                  <p>Name: {userDetails.name}</p>\n                  <p>Email: {userDetails.email}</p>\n                  <p>Address: {userDetails.address}</p>\n                </>\n              ) : null}\n            </Modal>\n            <Typography.Link\n              disabled={editingKey !== \"\"}\n              onClick={() => edit(record)}\n              style={{ marginRight: 8 }}\n            >\n              Edit\n            </Typography.Link>\n            <Typography.Link\n              // disabled={editingKey !== \"\"}\n              onClick={() => delete1(record)}\n            >\n              <Popconfirm title=\"Sure to delete?\" onConfirm={cancel}>\n                <a>Delete</a>\n              </Popconfirm>\n            </Typography.Link>\n          </>\n        );\n      },\n    },\n  ];\n\n  const mergedColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: Item) => ({\n        record,\n        inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  // const handleAdd = () => {\n\n  //   const newData: Item = {\n  //     key: String(count),\n  //     name: `Edward King ${count}`,\n  //     age: '32',\n  //     address: `London, Park Lane no. ${count}`,\n  //   };\n  //   this.setState({\n  //     dataSource: [...dataSource, newData],\n  //     count: count + 1,\n  //   });\n  // };\n  // let data1: any = localStorage.getItem(\"data\");\n  console.log(\"user details\", userDetails);\n  return (\n    <>\n      {/* <Button onClick={handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\n          Add a row\n        </Button> */}\n      <Form form={form} component={false}>\n        <Table\n          components={{\n            body: {\n              cell: EditableCell,\n            },\n          }}\n          bordered\n          dataSource={data}\n          columns={mergedColumns}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: cancel,\n          }}\n        />\n      </Form>\n    </>\n  );\n};\n\nexport default EditableTable;\n"]},"metadata":{},"sourceType":"module"}