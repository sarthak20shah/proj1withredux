{"ast":null,"code":"var _jsxFileName = \"/home/root-pc/Desktop/INTERN/projects/my-app/src/components/Ed.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Table, Input, InputNumber, Popconfirm, Form, Typography } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst originData = [];\n\nfor (let i = 0; i < 100; i++) {\n  originData.push({\n    key: i.toString(),\n    name: `Edrward ${i}`,\n    username: 31,\n    email: `London Park no. ${i}`\n  });\n}\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === \"number\" ? /*#__PURE__*/_jsxDEV(InputNumber, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 46\n  }, this) : /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 64\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      children: inputNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_c = EditableCell;\n\nconst Ed = () => {\n  _s();\n\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState(\"\");\n\n  const isEditing = record => record.key === editingKey;\n\n  console.log(\"hellooooooooooooooo\");\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => {\n      console.log(\"response\", response);\n    });\n  }, []);\n\n  const edit = record => {\n    form.setFieldsValue({\n      name: \"\",\n      username: \"\",\n      email: \"\",\n      ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        setData(newData);\n        setEditingKey(\"\");\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey(\"\");\n      }\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n\n  const columns = [{\n    title: \"name\",\n    dataIndex: \"name\",\n    width: \"25%\",\n    editable: true\n  }, {\n    title: \"username\",\n    dataIndex: \"username\",\n    width: \"15%\",\n    editable: true\n  }, {\n    title: \"email\",\n    dataIndex: \"email\",\n    width: \"40%\",\n    editable: true\n  }, {\n    title: \"operation\",\n    dataIndex: \"operation\",\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"javascript:;\",\n          onClick: () => save(record.key),\n          style: {\n            marginRight: 8\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: cancel,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography.Link, {\n        disabled: editingKey !== \"\",\n        onClick: () => edit(record),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this);\n    }\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === \"username\" ? \"number\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      components: {\n        body: {\n          cell: EditableCell\n        }\n      },\n      bordered: true,\n      dataSource: data,\n      columns: mergedColumns,\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: cancel\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Ed, \"0iLYCC8sRiqxaR1fNrIL7xZ/yig=\", false, function () {\n  return [Form.useForm];\n});\n\n_c2 = Ed;\nexport default Ed;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableCell\");\n$RefreshReg$(_c2, \"Ed\");","map":{"version":3,"sources":["/home/root-pc/Desktop/INTERN/projects/my-app/src/components/Ed.tsx"],"names":["React","useState","useEffect","Table","Input","InputNumber","Popconfirm","Form","Typography","originData","i","push","key","toString","name","username","email","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","margin","required","message","Ed","form","useForm","data","setData","editingKey","setEditingKey","isEditing","console","log","fetch","then","response","edit","setFieldsValue","cancel","save","row","validateFields","newData","findIndex","item","splice","errInfo","columns","width","editable","render","_","marginRight","mergedColumns","map","col","onCell","body","cell","onChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Table, Input, InputNumber, Popconfirm, Form, Typography } from \"antd\";\n\ninterface Item {\n  key: string;\n  name: string;\n  username: number;\n  email: string;\n}\n\nconst originData: Item[] = [];\nfor (let i = 0; i < 100; i++) {\n  originData.push({\n    key: i.toString(),\n    name: `Edrward ${i}`,\n    username: 31,\n    email: `London Park no. ${i}`,\n  });\n}\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n  editing: boolean;\n  dataIndex: string;\n  title: any;\n  inputType: \"number\" | \"text\";\n  record: Item;\n  index: number;\n  children: React.ReactNode;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === \"number\" ? <InputNumber /> : <Input />;\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nconst Ed = () => {\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState(\"\");\n\n  const isEditing = (record: Item) => record.key === editingKey;\n  console.log(\"hellooooooooooooooo\");\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then((response) => {\n      console.log(\"response\", response);\n    });\n  }, []);\n\n  const edit = (record: Partial<Item> & { key: React.Key }) => {\n    form.setFieldsValue({ name: \"\", username: \"\", email: \"\", ...record });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async (key: React.Key) => {\n    try {\n      const row = (await form.validateFields()) as Item;\n\n      const newData = [...data];\n      const index = newData.findIndex((item) => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        setData(newData);\n        setEditingKey(\"\");\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey(\"\");\n      }\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n\n  const columns = [\n    {\n      title: \"name\",\n      dataIndex: \"name\",\n      width: \"25%\",\n      editable: true,\n    },\n    {\n      title: \"username\",\n      dataIndex: \"username\",\n      width: \"15%\",\n      editable: true,\n    },\n    {\n      title: \"email\",\n      dataIndex: \"email\",\n      width: \"40%\",\n      editable: true,\n    },\n    {\n      title: \"operation\",\n      dataIndex: \"operation\",\n      render: (_: any, record: Item) => {\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <a\n              href=\"javascript:;\"\n              onClick={() => save(record.key)}\n              style={{ marginRight: 8 }}\n            >\n              Save\n            </a>\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n              <a>Cancel</a>\n            </Popconfirm>\n          </span>\n        ) : (\n          <Typography.Link\n            disabled={editingKey !== \"\"}\n            onClick={() => edit(record)}\n          >\n            Edit\n          </Typography.Link>\n        );\n      },\n    },\n  ];\n\n  const mergedColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: Item) => ({\n        record,\n        inputType: col.dataIndex === \"username\" ? \"number\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  return (\n    <Form form={form} component={false}>\n      <Table\n        components={{\n          body: {\n            cell: EditableCell,\n          },\n        }}\n        bordered\n        dataSource={data}\n        columns={mergedColumns}\n        rowClassName=\"editable-row\"\n        pagination={{\n          onChange: cancel,\n        }}\n      />\n    </Form>\n  );\n};\n\nexport default Ed;\n"]},"metadata":{},"sourceType":"module"}