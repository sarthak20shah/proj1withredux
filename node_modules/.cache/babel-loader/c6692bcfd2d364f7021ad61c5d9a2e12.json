{"ast":null,"code":"var _jsxFileName = \"/home/root-pc/Desktop/INTERN/projects/my-app/src/components/FinalTb.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { Table, Input, Button, Form } from \"antd\";\nimport \"./TableCom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditableContext = /*#__PURE__*/React.createContext(null);\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      console.log(\"Save failed:\", errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        onPressEnter: save,\n        onBlur: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(EditableCell, \"e4rtLwpAlgS80pELb3uhUXMhcfI=\");\n\n_c2 = EditableCell;\n\nclass FinalTb extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = void 0;\n\n    this.handleDelete = key => {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item.key !== key)\n      });\n    };\n\n    this.handleAdd = () => {\n      const {\n        count,\n        dataSource\n      } = this.state;\n      const newData = {\n        key: count,\n        name: `Edward King ${count}`,\n        age: \"32\",\n        address: `London, Park Lane no. ${count}`\n      };\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1\n      });\n    };\n\n    this.handleSave = row => {\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, { ...item,\n        ...row\n      });\n      this.setState({\n        dataSource: newData\n      });\n    };\n\n    this.columns = [{\n      title: \"name\",\n      dataIndex: \"name\",\n      width: \"30%\",\n      editable: true\n    }, {\n      title: \"age\",\n      dataIndex: \"age\"\n    }, {\n      title: \"address\",\n      dataIndex: \"address\"\n    } //   {\n    //     title: \"operation\",\n    //     dataIndex: \"operation\",\n    //     render: (_, record: { key: React.Key }) =>\n    //       this.state.dataSource.length >= 1 ? (\n    //         <Popconfirm\n    //           title=\"Sure to delete?\"\n    //           onConfirm={() => this.handleDelete(record.key)}\n    //         >\n    //           <a>Delete</a>\n    //         </Popconfirm>\n    //       ) : null,\n    //   },\n    ];\n    this.state = {\n      dataSource: [{\n        key: \"0\",\n        name: \"Edward King 0\",\n        age: \"32\",\n        address: \"London, Park Lane no. 0\"\n      }, {\n        key: \"1\",\n        name: \"Edward King 1\",\n        age: \"32\",\n        address: \"London, Park Lane no. 1\"\n      }],\n      count: 2\n    };\n  }\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.handleAdd,\n        type: \"primary\",\n        style: {\n          marginBottom: 16\n        },\n        children: \"Add a row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        components: components,\n        rowClassName: () => \"editable-row\",\n        bordered: true,\n        dataSource: dataSource,\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default FinalTb;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");","map":{"version":3,"sources":["/home/root-pc/Desktop/INTERN/projects/my-app/src/components/FinalTb.tsx"],"names":["React","useContext","useState","useEffect","useRef","Table","Input","Button","Form","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","console","log","childNode","margin","required","message","paddingRight","FinalTb","Component","constructor","columns","handleDelete","key","dataSource","state","setState","filter","item","handleAdd","count","newData","name","age","address","row","findIndex","splice","width","render","components","body","cell","map","col","onCell","marginBottom"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { Table, Input, Button, Popconfirm, Form } from \"antd\";\nimport { FormInstance } from \"antd/lib/form\";\nimport \"./TableCom.css\";\n\nconst EditableContext = React.createContext<FormInstance<any> | null>(null);\n\ninterface Item {\n  key: string;\n  name: string;\n  age: string;\n  address: string;\n}\n\ninterface EditableRowProps {\n  index: number;\n}\n\nconst EditableRow: React.FC<EditableRowProps> = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\ninterface EditableCellProps {\n  title: React.ReactNode;\n  editable: boolean;\n  children: React.ReactNode;\n  dataIndex: keyof Item;\n  record: Item;\n  handleSave: (record: Item) => void;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef<Input>(null);\n  const form = useContext(EditableContext)!;\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current!.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({ [dataIndex]: record[dataIndex] });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log(\"Save failed:\", errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{ paddingRight: 24 }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\ntype EditableTableProps = Parameters<typeof Table>[0];\n\ninterface DataType {\n  key: React.Key;\n  name: string;\n  age: string;\n  address: string;\n}\n\ninterface EditableTableState {\n  dataSource: DataType[];\n  count: number;\n}\n\ntype ColumnTypes = Exclude<EditableTableProps[\"columns\"], undefined>;\n\nclass FinalTb extends React.Component<EditableTableProps, EditableTableState> {\n  columns: (ColumnTypes[number] & { editable?: boolean; dataIndex: string })[];\n\n  constructor(props: EditableTableProps) {\n    super(props);\n\n    this.columns = [\n      {\n        title: \"name\",\n        dataIndex: \"name\",\n        width: \"30%\",\n        editable: true,\n      },\n      {\n        title: \"age\",\n        dataIndex: \"age\",\n      },\n      {\n        title: \"address\",\n        dataIndex: \"address\",\n      },\n      //   {\n      //     title: \"operation\",\n      //     dataIndex: \"operation\",\n      //     render: (_, record: { key: React.Key }) =>\n      //       this.state.dataSource.length >= 1 ? (\n      //         <Popconfirm\n      //           title=\"Sure to delete?\"\n      //           onConfirm={() => this.handleDelete(record.key)}\n      //         >\n      //           <a>Delete</a>\n      //         </Popconfirm>\n      //       ) : null,\n      //   },\n    ];\n\n    this.state = {\n      dataSource: [\n        {\n          key: \"0\",\n          name: \"Edward King 0\",\n          age: \"32\",\n          address: \"London, Park Lane no. 0\",\n        },\n        {\n          key: \"1\",\n          name: \"Edward King 1\",\n          age: \"32\",\n          address: \"London, Park Lane no. 1\",\n        },\n      ],\n      count: 2,\n    };\n  }\n\n  handleDelete = (key: React.Key) => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({\n      dataSource: dataSource.filter((item) => item.key !== key),\n    });\n  };\n\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData: DataType = {\n      key: count,\n      name: `Edward King ${count}`,\n      age: \"32\",\n      address: `London, Park Lane no. ${count}`,\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1,\n    });\n  };\n\n  handleSave = (row: DataType) => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex((item) => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row,\n    });\n    this.setState({ dataSource: newData });\n  };\n\n  render() {\n    const { dataSource } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell,\n      },\n    };\n    const columns = this.columns.map((col) => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: (record: DataType) => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave,\n        }),\n      };\n    });\n    return (\n      <div>\n        <Button\n          onClick={this.handleAdd}\n          type=\"primary\"\n          style={{ marginBottom: 16 }}\n        >\n          Add a row\n        </Button>\n        <Table\n          components={components}\n          rowClassName={() => \"editable-row\"}\n          bordered\n          dataSource={dataSource}\n          columns={columns as ColumnTypes}\n        />\n      </div>\n    );\n  }\n}\n\nexport default FinalTb;\n"]},"metadata":{},"sourceType":"module"}