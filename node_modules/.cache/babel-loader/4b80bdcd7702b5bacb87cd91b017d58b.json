{"ast":null,"code":"var _jsxFileName = \"/home/root-pc/Desktop/INTERN/projects/my-app/src/components/EditableTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form, Typography } from 'antd';\nimport './TableCom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet originData = [];\n\nfor (let i = 0; i < 10; i++) {\n  originData.push({\n    key: i.toString(),\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`\n  });\n}\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === 'number' ? /*#__PURE__*/_jsxDEV(InputNumber, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 48\n  }, this) : /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 66\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      children: inputNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n};\n\n_c = EditableCell;\n\nconst EditableTable = () => {\n  _s();\n\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState('');\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(res => {\n      console.log(res);\n      res.map((x11, index) => originData.push({\n        \"key\": String(x11.age),\n        \"name\": x11.name,\n        \"age\": x11.id,\n        \"address\": x11.email\n      }));\n      console.log(\"originData------>\", originData);\n    });\n  }, []);\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue({\n      name: '',\n      age: '',\n      address: '',\n      ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [{\n    title: 'name',\n    dataIndex: 'name',\n    width: '25%',\n    editable: true\n  }, {\n    title: 'age',\n    dataIndex: 'age',\n    width: '15%',\n    editable: true\n  }, {\n    title: 'address',\n    dataIndex: 'address',\n    width: '40%',\n    editable: true\n  }, {\n    title: 'operation',\n    dataIndex: 'operation',\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"javascript:;\",\n          onClick: () => save(record.key),\n          style: {\n            marginRight: 8\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: cancel,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Typography.Link, {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this);\n    }\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === 'age' ? 'number' : 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      components: {\n        body: {\n          cell: EditableCell\n        }\n      },\n      bordered: true,\n      dataSource: data,\n      columns: mergedColumns,\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: cancel\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 7\n  }, this);\n};\n\n_s(EditableTable, \"Lo6lfRl/8QR/IDIrLlLApivoy7Q=\", false, function () {\n  return [Form.useForm];\n});\n\n_c2 = EditableTable;\nexport default EditableTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableCell\");\n$RefreshReg$(_c2, \"EditableTable\");","map":{"version":3,"sources":["/home/root-pc/Desktop/INTERN/projects/my-app/src/components/EditableTable.tsx"],"names":["React","useState","useEffect","Table","Input","InputNumber","Popconfirm","Form","Typography","originData","i","push","key","toString","name","age","address","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","margin","required","message","EditableTable","form","useForm","data","setData","editingKey","setEditingKey","fetch","then","response","json","res","console","log","map","x11","String","id","email","isEditing","edit","setFieldsValue","cancel","save","row","validateFields","newData","findIndex","item","splice","errInfo","columns","width","editable","render","_","marginRight","mergedColumns","col","onCell","body","cell","onChange"],"mappings":"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","sourcesContent":["import React,{ useState,useEffect } from 'react'\nimport { Table, Input, InputNumber, Popconfirm, Form, Typography } from 'antd';\nimport './TableCom.css';\n\n\n\ninterface Item {\n  key: string;\n  name: string;\n  age: number;\n  address: string;\n}\n  \n  let originData: Item[]=[];\n  for (let i = 0; i < 10; i++) {\n    originData.push({\n      key: i.toString(),\n      name: `Edrward ${i}`,\n      age: 32,\n      address: `London Park no. ${i}`,\n    });\n  }\n\n\n  interface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n    editing: boolean;\n    dataIndex: string;\n    title: any;\n    inputType: 'number' | 'text';\n    record: Item;\n    index: number;\n    children: React.ReactNode;\n  }\n  \n  const EditableCell: React.FC<EditableCellProps> = ({\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    record,\n    index,\n    children,\n    ...restProps\n  }) => {\n    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n  \n    return (\n      <td {...restProps}>\n        {editing ? (\n          <Form.Item\n            name={dataIndex}\n            style={{ margin: 0 }}\n            rules={[\n              {\n                required: true,\n                message: `Please Input ${title}!`,\n              },\n            ]}\n          >\n            {inputNode}\n          </Form.Item>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  };\n  \n  const EditableTable = () => {\n    const [form] = Form.useForm();\n    const [data, setData] = useState(originData);\n    const [editingKey, setEditingKey] = useState('');\n    useEffect(() => {\n      fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(\n        \n      res=>{\n        \n        \n        console.log(res);\n        res.map((x11:any,index:number)=>originData.push({\"key\":String(x11.age),\"name\":x11.name,\"age\":x11.id,\"address\":x11.email}));\n        console.log(\"originData------>\",originData);\n      \n      \n      }\n        \n      \n      \n      );\n     }, []);\n    const isEditing = (record: Item) => record.key === editingKey;\n  \n    const edit = (record: Partial<Item> & { key: React.Key }) => {\n      form.setFieldsValue({ name: '', age: '', address: '', ...record });\n      setEditingKey(record.key);\n    };\n  \n    const cancel = () => {\n      setEditingKey('');\n    };\n  \n    const save = async (key: React.Key) => {\n      try {\n        const row = (await form.validateFields()) as Item;\n  \n        const newData = [...data];\n        const index = newData.findIndex(item => key === item.key);\n        if (index > -1) {\n          const item = newData[index];\n          newData.splice(index, 1, {\n            ...item,\n            ...row,\n          });\n          setData(newData);\n          setEditingKey('');\n        } else {\n          newData.push(row);\n          setData(newData);\n          setEditingKey('');\n        }\n      } catch (errInfo) {\n        console.log('Validate Failed:', errInfo);\n      }\n    };\n  \n    const columns = [\n      {\n        title: 'name',\n        dataIndex: 'name',\n        width: '25%',\n        editable: true,\n      },\n      {\n        title: 'age',\n        dataIndex: 'age',\n        width: '15%',\n        editable: true,\n      },\n      {\n        title: 'address',\n        dataIndex: 'address',\n        width: '40%',\n        editable: true,\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (_: any, record: Item) => {\n          const editable = isEditing(record);\n          return editable ? (\n            <span>\n              <a href=\"javascript:;\" onClick={() => save(record.key)} style={{ marginRight: 8 }}>\n                Save\n              </a>\n              <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n                <a>Cancel</a>\n              </Popconfirm>\n            </span>\n          ) : (\n            <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>\n              Edit\n            </Typography.Link>\n          );\n        },\n      },\n    ];\n  \n    const mergedColumns = columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: (record: Item) => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: isEditing(record),\n        }),\n      };\n    });\n  \n    return (\n      <Form form={form} component={false}>\n        <Table\n          components={{\n            body: {\n              cell: EditableCell,\n            },\n          }}\n          bordered\n          dataSource={data}\n          columns={mergedColumns}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: cancel,\n          }}\n        />\n      </Form>\n    );\n  };\n\n  export default EditableTable;\n"]},"metadata":{},"sourceType":"module"}