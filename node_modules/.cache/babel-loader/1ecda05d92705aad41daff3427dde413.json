{"ast":null,"code":"var _jsxFileName = \"/home/root-pc/Desktop/INTERN/projects/my-app/src/components/EditableTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Table, Button, Input, Modal, InputNumber, Popconfirm, Form, Typography } from \"antd\";\nimport \"./TableCom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet originData = []; // for (let i = 0; i < 10; i++) {\n//   originData.push({\n//     key: i.toString(),\n//     name: `Edrward ${i}`,\n//     age: 32,\n//     address: `London Park no. ${i}`,\n//   });\n// }\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === \"number\" ? /*#__PURE__*/_jsxDEV(InputNumber, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 46\n  }, this) : /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 64\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      children: inputNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_c = EditableCell;\n\nconst EditableTable = () => {\n  _s();\n\n  const [form] = Form.useForm();\n  const [editingKey, setEditingKey] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(res => {\n      console.log(res);\n      res.map((x11, index) => originData.push({\n        key: x11.id,\n        name: x11.name,\n        age: x11.id,\n        address: x11.email\n      }));\n      console.log(\"originData------>\", originData);\n      setData(originData);\n      console.log(data);\n    });\n  }, []);\n  const [data, setData] = useState(originData);\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue({\n      name: \"\",\n      age: \"\",\n      address: \"\",\n      ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const delete1 = record => {\n    form.setFieldsValue({});\n    setEditingKey(record.key);\n  };\n\n  const view = record => {\n    form.setFieldsValue({});\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        setData(newData);\n        setEditingKey(\"\");\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey(\"\");\n      }\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n\n  const columns = [{\n    title: \"name\",\n    dataIndex: \"name\",\n    width: \"25%\",\n    editable: true\n  }, {\n    title: \"age\",\n    dataIndex: \"age\",\n    width: \"15%\",\n    editable: true\n  }, {\n    title: \"address\",\n    dataIndex: \"address\",\n    width: \"40%\",\n    editable: true\n  }, {\n    title: \"operation\",\n    dataIndex: \"operation\",\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"javascript:;\",\n          onClick: () => save(record.key),\n          style: {\n            marginRight: 8\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: cancel,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          style: {\n            marginRight: 8\n          },\n          onClick: showModal,\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          title: \"Basic Modal\",\n          visible: isModalVisible,\n          onOk: handleOk,\n          onCancel: handleCancel,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\" Age is \", record.age]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Address is \", record.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Key is \", record.key]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Name is \", record.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography.Link, {\n          disabled: editingKey !== \"\",\n          onClick: () => edit(record),\n          style: {\n            marginRight: 8\n          },\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography.Link, {\n          disabled: editingKey !== \"\",\n          onClick: () => delete1(record),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true);\n    }\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  }); // const handleAdd = () => {\n  //   const newData: Item = {\n  //     key: String(count),\n  //     name: `Edward King ${count}`,\n  //     age: '32',\n  //     address: `London, Park Lane no. ${count}`,\n  //   };\n  //   this.setState({\n  //     dataSource: [...dataSource, newData],\n  //     count: count + 1,\n  //   });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      form: form,\n      component: false,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        components: {\n          body: {\n            cell: EditableCell\n          }\n        },\n        bordered: true,\n        dataSource: data,\n        columns: mergedColumns,\n        rowClassName: \"editable-row\",\n        pagination: {\n          onChange: cancel\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(EditableTable, \"MhuQ5rEJqMvX3CYp28VpsOUIve4=\", false, function () {\n  return [Form.useForm];\n});\n\n_c2 = EditableTable;\nexport default EditableTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableCell\");\n$RefreshReg$(_c2, \"EditableTable\");","map":{"version":3,"sources":["/home/root-pc/Desktop/INTERN/projects/my-app/src/components/EditableTable.tsx"],"names":["React","useState","useEffect","Table","Button","Input","Modal","InputNumber","Popconfirm","Form","Typography","originData","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","margin","required","message","EditableTable","form","useForm","editingKey","setEditingKey","count","setCount","isModalVisible","setIsModalVisible","showModal","handleOk","handleCancel","fetch","then","response","json","res","console","log","map","x11","push","key","id","name","age","address","email","setData","data","isEditing","edit","setFieldsValue","delete1","view","cancel","save","row","validateFields","newData","findIndex","item","splice","errInfo","columns","width","editable","render","_","marginRight","mergedColumns","col","onCell","body","cell","onChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Table,\n  Button,\n  Input,\n  Modal,\n  InputNumber,\n  Popconfirm,\n  Form,\n  Typography,\n} from \"antd\";\nimport \"./TableCom.css\";\n\ninterface Item {\n  key: string;\n  name: string;\n  age: number;\n  address: string;\n}\n\nlet originData: Item[] = [];\n// for (let i = 0; i < 10; i++) {\n//   originData.push({\n//     key: i.toString(),\n//     name: `Edrward ${i}`,\n//     age: 32,\n//     address: `London Park no. ${i}`,\n//   });\n// }\n\ninterface EditableCellProps extends React.HTMLAttributes<HTMLElement> {\n  editing: boolean;\n  dataIndex: string;\n  title: any;\n  inputType: \"number\" | \"text\";\n  record: Item;\n  index: number;\n  children: React.ReactNode;\n}\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === \"number\" ? <InputNumber /> : <Input />;\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nconst EditableTable = () => {\n  const [form] = Form.useForm();\n\n  const [editingKey, setEditingKey] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((res) => {\n        console.log(res);\n        res.map((x11: any, index: number) =>\n          originData.push({\n            key: x11.id,\n            name: x11.name,\n            age: x11.id,\n            address: x11.email,\n          })\n        );\n        console.log(\"originData------>\", originData);\n        setData(originData);\n        console.log(data);\n      });\n  }, []);\n  const [data, setData] = useState(originData);\n  const isEditing = (record: Item) => record.key === editingKey;\n\n  const edit = (record: Partial<Item> & { key: React.Key }) => {\n    form.setFieldsValue({ name: \"\", age: \"\", address: \"\", ...record });\n    setEditingKey(record.key);\n  };\n\n  const delete1 = (record: Partial<Item> & { key: React.Key }) => {\n    form.setFieldsValue({});\n    setEditingKey(record.key);\n  };\n\n  const view = (record: Partial<Item> & { key: React.Key }) => {\n    form.setFieldsValue({});\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey(\"\");\n  };\n\n  const save = async (key: React.Key) => {\n    try {\n      const row = (await form.validateFields()) as Item;\n\n      const newData = [...data];\n      const index = newData.findIndex((item) => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        setData(newData);\n        setEditingKey(\"\");\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey(\"\");\n      }\n    } catch (errInfo) {\n      console.log(\"Validate Failed:\", errInfo);\n    }\n  };\n\n  const columns = [\n    {\n      title: \"name\",\n      dataIndex: \"name\",\n      width: \"25%\",\n      editable: true,\n    },\n    {\n      title: \"age\",\n      dataIndex: \"age\",\n      width: \"15%\",\n      editable: true,\n    },\n    {\n      title: \"address\",\n      dataIndex: \"address\",\n      width: \"40%\",\n      editable: true,\n    },\n    {\n      title: \"operation\",\n      dataIndex: \"operation\",\n      render: (_: any, record: Item) => {\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <a\n              href=\"javascript:;\"\n              onClick={() => save(record.key)}\n              style={{ marginRight: 8 }}\n            >\n              Save\n            </a>\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n              <a>Cancel</a>\n            </Popconfirm>\n          </span>\n        ) : (\n          <>\n            {/* <Typography.Link disabled={editingKey !== ''} onClick={() => view(record)} style={{ marginRight: 8 }}>\n             View\n           </Typography.Link> */}\n\n            <Button\n              type=\"primary\"\n              style={{ marginRight: 8 }}\n              onClick={showModal}\n            >\n              View\n            </Button>\n            <Modal\n              title=\"Basic Modal\"\n              visible={isModalVisible}\n              onOk={handleOk}\n              onCancel={handleCancel}\n            >\n              <p> Age is {record.age}</p>\n              <p>Address is {record.address}</p>\n              <p>Key is {record.key}</p>\n              <p>Name is {record.name}</p>\n            </Modal>\n            <Typography.Link\n              disabled={editingKey !== \"\"}\n              onClick={() => edit(record)}\n              style={{ marginRight: 8 }}\n            >\n              Edit\n            </Typography.Link>\n            <Typography.Link\n              disabled={editingKey !== \"\"}\n              onClick={() => delete1(record)}\n            >\n              Delete\n            </Typography.Link>\n          </>\n        );\n      },\n    },\n  ];\n\n  const mergedColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: Item) => ({\n        record,\n        inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  // const handleAdd = () => {\n\n  //   const newData: Item = {\n  //     key: String(count),\n  //     name: `Edward King ${count}`,\n  //     age: '32',\n  //     address: `London, Park Lane no. ${count}`,\n  //   };\n  //   this.setState({\n  //     dataSource: [...dataSource, newData],\n  //     count: count + 1,\n  //   });\n  // };\n  return (\n    <>\n      {/* <Button onClick={handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\n          Add a row\n        </Button> */}\n      <Form form={form} component={false}>\n        <Table\n          components={{\n            body: {\n              cell: EditableCell,\n            },\n          }}\n          bordered\n          dataSource={data}\n          columns={mergedColumns}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: cancel,\n          }}\n        />\n      </Form>\n    </>\n  );\n};\n\nexport default EditableTable;\n"]},"metadata":{},"sourceType":"module"}